const express = require('express');
const router = express();

const fs = require('fs');
const process = require('process');
const ejs = require("ejs");

router.set('view engine', 'ejs');
router.set('trust proxy', true);


// ################################################
// ###  INITIALIZING AND DEFINING DATA ARRAYS   ###
// ################################################

// important sections and branch-offs:
// 100 initial eval
// 200 has use but question is (a) Europe, (b) substantial
// 300 has trademark - add. questions (a) in EU, (b) has use
// 800 all good let's file trademark
// 888 all clear for the guy -> reco and asking sign up

const Responses =
  [ { step: "100", q: "Do you already have a registered trademark for ${brand}?",
      answers: [
      { a: "Yes", as: "reg.tm.Y", value: "acty", color: " btn-success", summary: "You do have a registered trademark protecting your brand ${brand}.", nextStep: "301" },
      { a: "No", as: "reg.tm.N", value: "actn", color: " btn-danger", summary: "You do not have a registered trademark for ${brand}", nextStep: "101" } ] },

   { step: "001", q: "Do you currently have any website active at ${domain}?",
      answers: [
      { a: "Yes", as: "ws.act.Y", value: "acty", color: " btn-success", summary: "You do have an active website at ${domain}", nextStep: "102" },
      { a: "No", as: "ws.act.N", value: "actn", color: " btn-danger", summary: "You do not have an active website at ${domain}", nextStep: "102" } ] },

    { step: "102", q: "Does this website generate revenues for products branded ${brand}?",
      answers: [  
      { a: "Yes", as: "gen.rev.Y", value: "genrevy", color: " btn-success", summary: "You generate revenues from the brand ${brand}. ", nextStep: "103" },
      { a: "No", as: "gen.rev.N", value: "genrevn", color: " btn-danger", summary: "You are not generating any revenues from products or services branded '${brand}'", nextStep: "103" } ] },

    { step: "103", q: "Do you have blablabla?",
      answers: [  
      { a: "Yes", as: "gen.rev.Y", value: "genrevy", color: " btn-success", summary: "You generate revenues from the brand ${brand}. ", nextStep: "103" },
      { a: "No", as: "gen.rev.N", value: "genrevn", color: " btn-danger", summary: "You are not generating any revenues from products or services branded '${brand}'", nextStep: "103" } ] },

// 200 has use but question is (a) Europe, (b) substantial

    { step: "201", q: "Are revenues generated by the sale of Goods (shipped to clients) or from Services?",
      answers: [
      { a: "Goods", as: "G", value: "goods", color: " btn-warning", summary: "You are sending ${brand}-branded goods to clients", nextStep: "4" },
      { a: "Services", as: "S", value: "serv", color: " btn-secondary", summary: "You are providing Services under the brand '${brand}'", nextStep: "10" } ] },

    { step: "202", q: "What annual revenues does www.${domain} generate?",
      answers: [
      { a: "Less than $20,000", as: "L2K", color: " btn-primary", summary: "You are generating less than $20,000 annual revenues from ${website}. ", nextStep: "4" },
      { a: "$20,000 - $80,000", as: "2T8K", color: " btn-secondary", summary: "You are generating the revenues of a small business. ", nextStep: "10" },
      { a: "$80,000 - $300,000", as: "8T3K", color: " btn-info", summary: "You are generating the revenues of a small business. ", nextStep: "10" },
      { a: "more than $300,000", as: "3PK", color: " btn-dark", summary: "You are generating sizeable revenues. ", nextStep: "10" } ] },

    { step: "203", q: "What annual revenues does www.${domain} generate?",
      answers: [
      { a: "Less than $20,000", as: "L2K", color: " btn-primary", summary: "You are generating less than $20,000 annual revenues from ${website}. ", nextStep: "4" },
      { a: "$20,000 - $80,000", as: "2T8K", color: " btn-secondary", summary: "You are generating the revenues of a small business. ", nextStep: "10" },
      { a: "$80,000 - $300,000", as: "8T3K", color: " btn-info", summary: "You are generating the revenues of a small business. ", nextStep: "10" },
      { a: "more than $300,000", as: "3PK", color: " btn-dark", summary: "You are generating sizeable revenues. ", nextStep: "10" } ] },

    { step: "204", q: "Does this website generate revenues for products branded ${brand}?",
      answers: [
      { a: "Yes", as: "Y", choice: "genrevy", color: " btn-success", summary: "You generate revenues from the brand ${brand}. ", nextStep: "3" },
      { a: "No", as: "N", choice: "genrevn", color: " btn-danger", summary: "You are not generating any revenues from products or services branded '${brand}'", nextStep: "100" } ] },

// 300 has trademark - add. questions (a) in EU, (b) has use
/*
  HERE would be great to have CHECKBOX dialogue
    { step: "300", q: "In what country/jurisdiction do you have existing and registered trademarks for ${brand}? ",
      answers: [
    { a: "Yes", as: "Y", choice: "genrevy", color: " btn-success", summary: "You generate revenues from the brand ${brand}. ", nextStep: "3" },
    { a: "No", as: "N", choice: "genrevn", color: " btn-danger", summary: "You are not generating any revenues from products or services branded '${brand}'", nextStep: "100" } ] },
*/
 
    { step: "301", q: "Is your existing trademark registration for ${brand} at the European Intellectual Property Office? ",
      answers: [
     { a: "Yes", as: "is.at.EUIPO", choice: "genrevy", color: " btn-success", summary: "You generate revenues from the brand ${brand}. ", nextStep: "3" },
     { a: "No", as: "is.not.at.EUIPO", choice: "genrevn", color: " btn-danger", summary: "You are not generating any revenues from products or services branded '${brand}'", nextStep: "100" } ] },

// --- maybe other stuff 

   { step: "501", q: "Is your existing trademark registration for ${brand} at the European Intellectual Property Office? ",
     answers: [
    { a: "Yes", as: "is.at.EUIPO", choice: "genrevy", color: " btn-success", summary: "You generate revenues from the brand ${brand}. ", nextStep: "3" },
    { a: "No", as: "is.not.at.EUIPO", choice: "genrevn", color: " btn-danger", summary: "You are not generating any revenues from products or services branded '${brand}'", nextStep: "100" } ] },


// 800 all good let's file trademark
// 888 all clear for the guy -> reco and asking sign up

    { step: "800", conclusion: 
      "With an existing trademark registration in the name of your company you have taken the " +
      "first step to protect your brand. Did you know that TRADEMARKERS can monitor your marks and " +
      "remind you when renewals are due? Sign up for a free account to find out our services!",
      answers: [
        { pre: "We recommend you", button: "Sign Up", post: "for a free account!", link: '/signup', color: " btn-success" } ] },
  
    { step: "888", conclusion: 
            "With an existing trademark registration in the name of your company you have taken the " +
            "first step to protect your brand. Did you know that TRADEMARKERS can monitor your marks and " +
            "remind you when renewals are due? Sign up for a free account to find out our services!",
      action: [
      { pre: "", button: "Sign Up Now", post: "for a free account!", action: "/signup" } ] }
  ];

const actionCodes = [ { actionCode: "1P-8C0G-F", nextStep: "001", responses: "" } ];


    

// ######################
// ###    EVALUATE    ###
// ######################

router.get ("/evaluate*", function (req, res) {
  // check if there is any argument
  let [tm, ev, arg] = req.url.split('/');
  if (arg === undefined) {
    arg = "1P-8C0G-F";
  } else {
    let [ac1, ac2, ac3] = arg.split('-');
    console.log (`[${ac1}] [${ac2}] [${ac3}]`);
  
    let actionCode = ac1 + '-' + ac2 + '-' + ac3;  
  }

  let [ac1, ac2, ac3] = arg.split('-');
  console.log (`[${ac1}] [${ac2}] [${ac3}]`);

  let actionCode = ac1 + '-' + ac2 + '-' + ac3;

  actionCode = "1P-8C0G-F";
  console.log (req.url + "[" + actionCode + "]");

  // simulating database access and moving values of action code 
  // "1P-8C0G-F" into "result"
  let result = {
      "_id": {
          "$oid": "5feb114acc1d547a0845ed9b"
      },
      "number": "1P-8C0G-F",
      "redirect_to": "/what-is-the-uniform-domain-name-dispute-resolution-policy",
      "basis": "EUTM",
      "name": "Biogota",
      "nice": "3",
      "description": "",
      "tm_number": "018343919",
      "classes": [{
          "class": 3,
          "description": "Toiletries; Essential oils and aromatic extracts; Aromatics [essential oils]; Rose oil; Peppermint crude oil; Aromatic oils; Aromatic essential oils; Scented oils; Aromatherapy oil; Ethereal oils; Essential oils of lemon; Essential oils of citron; Essential oils of cedarwood; Emulsified essential oils; Natural essential oils; Essential oils for soothing the nerves; Essential oils for household use; Essential oils for aromatherapy use; Essential oils for personal use; Non-medicated oils; Aromatherapy preparations; Natural oils for cosmetic purposes; Skin care oils [non-medicated]; Scented oils used to produce aromas when heated; Food flavourings [essential oils]; Flavourings for beverages [essential oils]; Mint essence [essential oil]; Blended essential oils; Lavender oil; Almond oil; Coconut oil for cosmetic purposes; Jasmine oil; Gaultheria oil; Pine oil; Essential vegetable oils; Essential oils of sandalwood."
      }],
      "related_data": {
          "event": {
              "_id": {
                  "$oid": "5feb1136fe43b079ec925201"
              },
              "brand": "biogota",
              "domains": [{
                  "domain_name": "biogota.com",
                  "created_at": 201229
              }],
              "emailProspects": [{
                  "email": "webmaster@biogota.com"
              }, {
                  "email": "info@biogota.com"
              }, {
                  "email": "legal@biogota.com"
              }, {
                  "email": "contact@biogota.com"
              }],
              "event_type": "opposition-for-domain-owners-euipo",
              "last_crawl": 201228,
              "case": {
                  "_id": {
                      "$oid": "5fdb0a07c1e9a942cc14b435"
                  },
                  "subsequentDesignationCurrentStatusCode": "",
                  "distIndicator": "false",
                  "representativeid": "77486",
                  "internationalMarkCurrentStatusMilestone": "",
                  "basis": "EUTM",
                  "secondLanguage": "en",
                  "nice": "3",
                  "numberToShow": "018343919",
                  "publisheddate": "1607295600000",
                  "publishedsection": "A.1",
                  "type": "Word",
                  "expirydate": "",
                  "applicantCountry": "PT",
                  "statusCode": "",
                  "milestone": "22",
                  "thumbnailurl": "",
                  "name": "Biogota",
                  "commonDescriptor": "CSD_4",
                  "applicantname": "22 Soluções Web",
                  "imageurl": "",
                  "internationalMarkCurrentStatus": "",
                  "designationdate": "",
                  "publishedurl": "/copla/bulletin/data/detail/ctm/018343919/2020_233",
                  "applicantsreference": "",
                  "registrationdate": "",
                  "status": "Application published",
                  "applicantStatus": "Insert",
                  "fastTrackIndicator": "true",
                  "number": "018343919",
                  "kindMark": "Individual",
                  "firstLanguage": "pt",
                  "publications": [{
                      "datebulletin": "1607295600000",
                      "namebulletin": "2020/233",
                      "sectionpub": "A.1",
                      "urlpub": "/copla/bulletin/data/detail/ctm/018343919/2020_233"
                  }],
                  "internationalMarkCurrentStatusCode": "",
                  "filingdate": "1606258800000",
                  "subsequentDesignationCurrentStatus": "",
                  "subsequentDesignationCurrentStatusMilestone": "",
                  "controller": "trademark",
                  "applicantid": "1144968",
                  "representativename": "Luís Pedro Fernandes",
                  "lead_status": true,
                  "domain_generated": false,
                  "email_generated": false
              },
              "created_at": 201229
          },
          "email": {
              "email": "webmaster@biogota.com"
          }
      }
  };


  if (actionCode.length !== 9) {
    res.status(404).send('No.');
    res.end(); return;
  };

//  let xclient = db.collectionHandle ();

//  let mongoActionCodes = db.collectionHandle ().collection ("tm_actions");
//  console.log ("\n\n",mongoActionCodes,"\n\n");

//    console.log (db.mongo ("tm_actions"));

    if (result == null) {
      res.status(404).send(`not found :-(<p><b>{${actionCode}]`);
      return;
    }

/// here there will be database interaction

    let Initial = {
      basis: "Adverse Trademark Application:",
      actionCode: actionCode,
      basis: "Adverse European Union Trademark Application:",
      tmname: result.name,
      code: "testcode",
        sessionid: "abbaabba",
        domain: "hotzone.com",
        tm: "Hotzone",
        brand: "HotZone",
        tmNo: "123456",
        filed: "Oct. 12, 2020",
        pub: "Dec. 5, 2020",
        status: "0",
        summary: "This questionaire shall help you determine ... blablabla ... ",
        question: { step: "001", q: "Do you have any existing trademarks protecting your brand ${brand}?",
            answers: [
            { a: "Yes", as: "Y", color: " btn-success", summary: "You have a registered trademark for ${brand}. ", nextStep: "101" },
            { a: "No", as: "N", color: " btn-danger", summary: "You do not have any registered trademark for ${brand}. ", nextStep: "101" } ]
      } };
    

    res.render ('www-trademarkers-com-evaluate', { Initial });

//    console.log ("this is received:");
//    let x = await db.nice_try_connectionHandle ();    
//    console.log (x);
 
});


// ################################
// ###    API-IMPLEMENTATION    ###
// ################################

var XMLHttpRequest = require('xmlhttprequest').XMLHttpRequest;

router.post ('/tmo', function (req, res) {
  console.log(`trademarkers.js: POST to /tmo\n`, req.body);

  if (req.body.actionCode == undefined) {
    console.log (`Major problem - no argument 'actionCode'!!!`);
    let next = { step: "999", redirect: "https://www.foxnews.com" };

    res.setHeader('content-type', 'application/json');
    res.write (JSON.stringify (next, null, 2));
    res.end ();
  }

 // for testing purposes: pick RANDOM next question
  let nextQ = Math.floor (Math.random () * 4);

  console.log (`Sending the next question #${nextQ}`);
  console.log (Responses[nextQ]);

  res.setHeader('content-type', 'application/json');
  res.write (JSON.stringify (Responses[nextQ], null, 2));
  res.end ();
  

/*

  // let's see what choice was made
  var next = Responses.findIndex (x => x.step === req.body.nextStep);
  if (next == -1) {
    console.log (`Internal Error in scripting - ${req.body.nextStep} not found!`);
    res.setHeader('content-type', 'application/json');
    res.write ('{ redirect: "https://www.foxnews.com" }');
    res.end (); return; 
  }

  // add the choice to the log, first let's see if we find the actionCodes array:
  var found = actionCodes.findIndex (x => x.actionCode === req.body.actionCode);
  if (found == -1) {
    // not found, terminate:
    res.setHeader('content-type', 'application/json');
    res.write ('{ redirect: "https://www.foxnews.com" }');
    res.end (); return; 
  }

console.log ("Found: ", actionCodes[found]);

  // now we know that we have a record for action code, let's add the choice:
  if (actionCodes[found].history === undefined) {
    actionCodes[found].history = req.body.answer;
  } else {
    actionCodes[found].history = actionCodes[found].history + " " + req.body.answer;
  }

  console.log ("Adding to history:\n ", actionCodes[found]);

  console.log (`New updated record: ${actionCodes[found]}`);
  
  // find the response record associates with 'choice':
  var next = Responses.findIndex (x => x.a === req.body.answer);
  if (next == -1) {
    console.log (`Internal Error in scripting - ${req.body.answer} not found!`);
    res.setHeader('content-type', 'application/json');
    res.write ('{ redirect: "https://www.foxnews.com" }');
    res.end (); return; 
  }

  console.log (`Sending the next question ${Responses[next]}`);
  res.setHeader('content-type', 'application/json');
  res.write (`${Responses[next]}`);
  res.end (); 
*/
});

router.listen (3000, err => {
  if (err) {
    console.log('bad things');
    return;
  }
});
